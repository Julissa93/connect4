{"version":3,"sources":["utils.js","TableCell.js","TableRow.js","Table.js","Header.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["isValidCell","row","col","board","length","checkIfGameIsWon","currentPlayer","currPlayer","visited","checkDiagonalHelper","Object","keys","checkBackslashDiagonal","currPlacoler","checkForwardSlashDiagonal","checkHorizontalHelper","checkHorizontal","checkVerticalHelper","checkVertical","TableCell","colIndex","handleClick","color","value","onClick","className","TableRow","map","Table","gameBoard","rowIndex","Header","isWon","reset","GameView","props","state","newBoard","i","Array","fill","setState","togglePlayer","checkForWin","column","dropChecker","selectedColumn","nextAvailableSpace","columnIsFull","gameBoardCopy","randomizer","Math","floor","random","getCurrentPlayer","prevState","prevProps","this","setTimeout","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAMA,EAAc,SAACC,EAAKC,EAAKC,GAC3B,QACEF,EAAM,GACNA,GAAOE,EAAMC,QACbF,EAAM,GACNA,GAAOC,EAAMF,GAAKG,SA6FTC,EAZU,SAACJ,EAAKC,EAAKC,EAAOG,GACzC,OAC6D,IA7EhC,SAACL,EAAKC,EAAKC,EAAOI,GAC/C,IAAIC,EAAU,GAed,OAd4B,SAAtBC,EAAuBR,EAAKC,IAEG,IAAjCF,EAAYC,EAAKC,EAAKC,IAAoBA,EAAMF,GAAKC,KAASK,GAC9DC,EAAQ,CAACP,EAAKC,KAIXM,EAAQ,CAACP,EAAKC,MACjBM,EAAQ,CAACP,EAAKC,KAAQ,EACtBO,EAAoBR,EAAM,EAAGC,EAAM,GACnCO,EAAoBR,EAAM,EAAGC,EAAM,IAGvCO,CAAoBR,EAAKC,GAClBQ,OAAOC,KAAKH,GAASJ,OA6D1BQ,CAAuBX,EAAKC,EAAKC,EAAOG,IACsB,IA3DhC,SAACL,EAAKC,EAAKC,EAAOU,GAClD,IAAIL,EAAU,GAgBd,OAf4B,SAAtBC,EAAuBR,EAAKC,IAEG,IAAjCF,EAAYC,EAAKC,EAAKC,IACtBA,EAAMF,GAAKC,KAASW,GACpBL,EAAQ,CAACP,EAAKC,KAIXM,EAAQ,CAACP,EAAKC,MACjBM,EAAQ,CAACP,EAAKC,KAAQ,EACtBO,EAAoBR,EAAM,EAAGC,EAAM,GACnCO,EAAoBR,EAAM,EAAGC,EAAM,IAGvCO,CAAoBR,EAAKC,GAClBQ,OAAOC,KAAKH,GAASJ,OA0C1BU,CAA0Bb,EAAKC,EAAKC,EAAOG,IACS,IAzChC,SAACL,EAAKC,EAAKC,EAAOI,GACxC,IAAIC,EAAU,GAgBd,OAf8B,SAAxBO,EAAyBd,EAAKC,IAEC,IAAjCF,EAAYC,EAAKC,EAAKC,IACtBA,EAAMF,GAAKC,KAASK,GACpBC,EAAQ,CAACP,EAAKC,KAIXM,EAAQ,CAACP,EAAKC,MACjBM,EAAQ,CAACP,EAAKC,KAAQ,EACtBa,EAAsBd,EAAKC,EAAM,GACjCa,EAAsBd,EAAKC,EAAM,IAGrCa,CAAsBd,EAAKC,GACpBQ,OAAOC,KAAKH,GAASJ,OAwB1BY,CAAgBf,EAAKC,EAAKC,EAAOG,IACiB,IAvBhC,SAACL,EAAKC,EAAKC,EAAOI,GACtC,IAAIC,EAAU,GAed,OAd4B,SAAtBS,EAAuBhB,EAAKC,IAEG,IAAjCF,EAAYC,EAAKC,EAAKC,IACtBA,EAAMF,GAAKC,KAASK,GACpBC,EAAQ,CAACP,EAAKC,KAIXM,EAAQ,CAACP,EAAKC,MACjBM,EAAQ,CAACP,EAAKC,KAAQ,EACtBe,EAAoBhB,EAAM,EAAGC,IAGjCe,CAAoBhB,EAAKC,GAClBQ,OAAOC,KAAKH,GAASJ,OAO1Bc,CAAcjB,EAAKC,EAAKC,EAAOG,I,OC9EpBa,EAbG,SAAC,GAAoC,IAAlCjB,EAAiC,EAAjCA,IAAKkB,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC9BC,EAAQ,GAMZ,OALY,IAARpB,EACFoB,EAAQ,MACS,IAARpB,IACToB,EAAQ,UAGR,oBAAIC,MAAOrB,EAAKsB,QAAS,kBAAMH,EAAYD,EAAUlB,IAArD,SACI,qBAAKuB,UAAS,eAAUH,QCQjBI,EAfE,SAAC,GAAiC,IAA/BzB,EAA8B,EAA9BA,IAAYoB,GAAkB,EAAzBE,MAAyB,EAAlBF,aAC9B,OACE,6BACGpB,EAAI0B,KAAI,SAACzB,EAAKkB,GAAN,OACP,cAAC,EAAD,CAEElB,IAAKA,EACLkB,SAAUA,EACVC,YAAaA,GAHRD,SCeAQ,EAnBD,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UAAWR,EAAkB,EAAlBA,YAC1B,OACE,gCACE,gCACGQ,EAAUF,KAAI,SAAC1B,EAAK6B,GACnB,OACE,cAAC,EAAD,CAEE7B,IAAKA,EACLsB,MAAOO,EACPT,YAAaA,GAHRS,WCQJC,EAhBA,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOzB,EAAwB,EAAxBA,WAAY0B,EAAY,EAAZA,MACnC,OACE,sBAAKR,UAAU,UAAf,UACE,2CACA,sBAAKA,UAAU,aAAf,WACa,IAAVO,EACC,uDAAuBzB,EAAvB,mBAEA,kDAAqBA,KAEvB,wBAAQiB,QAASS,EAAjB,0BCPaC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAeRF,MAAQ,WAGN,IAFA,IAAQJ,EAAc,EAAKO,MAAnBP,UACJQ,EAAW,GACNC,EAAI,EAAGA,EAAIT,EAAUzB,OAAQkC,IACpCD,EAASC,GAAK,IAAIC,MAAMV,EAAUS,GAAGlC,QAAQoC,KAAK,MAEpD,EAAKC,SAAS,CAAEZ,UAAWQ,EAAU/B,cAAe,EAAG0B,OAAO,KAtB7C,EAyBnBU,aAAe,WAES,IADI,EAAKN,MAAvB9B,cAEN,EAAKmC,SAAS,CAAEnC,cAAe,IAE/B,EAAKmC,SAAS,CAAEnC,cAAe,KA9BhB,EAkCnBqC,YAAc,SAAC1C,EAAK2C,GAClB,MAAqC,EAAKR,MAAlCP,EAAR,EAAQA,UAAWvB,EAAnB,EAAmBA,cACnB,OAAgE,IAA5DD,EAAiBJ,EAAK2C,EAAQf,EAAWvB,KAC3C,EAAKmC,SAAS,CAAET,OAAO,KAChB,IAtCQ,EA2CnBX,YAAc,SAACnB,GAES,IADI,EAAKkC,MAAvB9B,eAEN,EAAKuC,YAAY3C,IA9CF,EAkDnB2C,YAAc,SAACC,GACb,IAIIC,EAJJ,EAA4C,EAAKX,MAAzCP,EAAR,EAAQA,UAAWG,EAAnB,EAAmBA,MAAO1B,EAA1B,EAA0BA,cACpB0C,EAAgD,OAAjCnB,EAAU,GAAGiB,GAC9BG,EAAgBpB,EAChB5B,EAAMgD,EAAc7C,OAAS,EAGjC,IAAc,IAAV4B,IAGAgB,EAAJ,CAGE,KAAO/C,GAAO,GAAG,CACf,GAA2C,OAAvCgD,EAAchD,GAAK6C,GAA0B,CAE/CG,EADAF,EAAqB9C,GACa6C,GAAkBxC,EACpD,MAEFL,KAE2D,IAAzD,EAAK0C,YAAYI,EAAoBD,IACvC,EAAKJ,eAEP,EAAKD,SAAS,CAAEZ,UAAWoB,MA1EZ,EA8EnBC,WAAa,WACX,IAAQrB,EAAc,EAAKO,MAAnBP,UACFe,EAASO,KAAKC,MAAMD,KAAKE,SAAWxB,EAAUzB,QACpD,EAAKyC,YAAYD,IAjFA,EAoFnBU,iBAAmB,WAEjB,OAAsB,IADI,EAAKlB,MAAvB9B,cAEC,QAEA,MAvFT,EAAK8B,MAAQ,CACX9B,cAAe,EACf0B,OAAO,EACPH,UAAW,CACT,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,QAXxB,E,sDA6FnB,SAAmB0B,EAAWC,GAAY,IAAD,OAEjB,IADIC,KAAKrB,MAAvB9B,eAENoD,YAAW,kBAAM,EAAKR,eAAc,O,oBAIxC,WACE,MAA6BO,KAAKrB,MAA1BP,EAAR,EAAQA,UAAWG,EAAnB,EAAmBA,MACbzB,EAAakD,KAAKH,mBACxB,OACE,sBAAK7B,UAAU,YAAf,UACE,cAAC,EAAD,CAAQlB,WAAYA,EAAYyB,MAAOA,EAAOC,MAAOwB,KAAKxB,QAC1D,cAAC,EAAD,CAAOJ,UAAWA,EAAWR,YAAaoC,KAAKpC,qB,GA3GjBsC,aCCvBC,MAJf,WACE,OAAO,cAAC,EAAD,KCSMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f74b74f1.chunk.js","sourcesContent":["const isValidCell = (row, col, board) => {\n    if (\n      row < 0 ||\n      row >= board.length ||\n      col < 0 ||\n      col >= board[row].length\n    ) {\n      return false;\n    }\n    return true;\n};\nconst checkBackslashDiagonal = (row, col, board, currPlayer) => {\n  let visited = {};\n  const checkDiagonalHelper = (row, col) => {\n    if (\n      isValidCell(row, col, board) === false || board[row][col] !== currPlayer ||\n      visited[[row, col]]\n    ) {\n      return;\n    }\n    if (!visited[[row, col]]) {\n      visited[[row, col]] = true;\n      checkDiagonalHelper(row + 1, col + 1);\n      checkDiagonalHelper(row - 1, col - 1);\n    }\n  };\n  checkDiagonalHelper(row, col);\n  return Object.keys(visited).length;\n};\n\nconst checkForwardSlashDiagonal = (row, col, board, currPlacoler) => {\n  let visited = {};\n  const checkDiagonalHelper = (row, col) => {\n    if (\n      isValidCell(row, col, board) === false ||\n      board[row][col] !== currPlacoler ||\n      visited[[row, col]]\n    ) {\n      return;\n    }\n    if (!visited[[row, col]]) {\n      visited[[row, col]] = true;\n      checkDiagonalHelper(row + 1, col - 1);\n      checkDiagonalHelper(row - 1, col + 1);\n    }\n  };\n  checkDiagonalHelper(row, col);\n  return Object.keys(visited).length;\n};\nconst checkHorizontal = (row, col, board, currPlayer) => {\n  let visited = {};\n  const checkHorizontalHelper = (row, col) => {\n    if (\n      isValidCell(row, col, board) === false ||\n      board[row][col] !== currPlayer ||\n      visited[[row, col]]\n    ) {\n      return;\n    }\n    if (!visited[[row, col]]) {\n      visited[[row, col]] = true;\n      checkHorizontalHelper(row, col - 1);\n      checkHorizontalHelper(row, col + 1);\n    }\n  };\n  checkHorizontalHelper(row, col);\n  return Object.keys(visited).length;\n};\nconst checkVertical = (row, col, board, currPlayer) => {\n  let visited = {};\n  const checkVerticalHelper = (row, col) => {\n    if (\n      isValidCell(row, col, board) === false ||\n      board[row][col] !== currPlayer ||\n      visited[[row, col]]\n    ) {\n      return;\n    }\n    if (!visited[[row, col]]) {\n      visited[[row, col]] = true;\n      checkVerticalHelper(row + 1, col);\n    }\n  };\n  checkVerticalHelper(row, col);\n  return Object.keys(visited).length;\n};\nconst checkIfGameIsWon = (row, col, board, currentPlayer) => {\n  if (\n    checkBackslashDiagonal(row, col, board, currentPlayer) === 4 ||\n    checkForwardSlashDiagonal(row, col, board, currentPlayer) === 4 ||\n    checkHorizontal(row, col, board, currentPlayer) === 4 ||\n    checkVertical(row, col, board, currentPlayer) === 4\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport default checkIfGameIsWon","const TableCell = ({ col, colIndex, handleClick }) => {\n  let color = \"\";\n  if (col === 1) {\n    color = \"red\";\n  } else if (col === 0) {\n    color = \"yellow\";\n  }\n  return (\n    <td value={col} onClick={() => handleClick(colIndex, col)}>\n        <div className={`cell ${color}`}></div>\n    </td>\n  );\n};\nexport default TableCell;\n","import TableCell from './TableCell';\n\nconst TableRow = ({ row, value, handleClick }) => {\n  return (\n    <tr>\n      {row.map((col, colIndex) => (\n        <TableCell\n          key={colIndex}\n          col={col}\n          colIndex={colIndex}\n          handleClick={handleClick}\n        />\n      ))}\n    </tr>\n  );\n};\n\nexport default TableRow","import React from \"react\";\nimport TableRow from \"./TableRow\";\n\nconst Table = ({ gameBoard, handleClick }) => {\n  return (\n    <table>\n      <tbody>\n        {gameBoard.map((row, rowIndex) => {\n          return (\n            <TableRow\n              key={rowIndex}\n              row={row}\n              value={rowIndex}\n              handleClick={handleClick}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\n\nconst Header = ({ isWon, currPlayer, reset }) => {\n  return (\n    <div className=\"heading\">\n      <h1>Connect 4</h1>\n      <div className=\"scoreboard\">\n        {isWon === true ? (\n          <h2>&#127881; WINNER: {currPlayer} &#127881;</h2>\n        ) : (\n          <h2>Current Player: {currPlayer}</h2>\n        )}\n        <button onClick={reset}>Reset</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;","import React, { Component } from \"react\";\nimport checkIfGameIsWon from \"./utils\";\nimport Table from \"./Table\";\nimport Header from \"./Header\";\n\nexport default class GameView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPlayer: 1,\n      isWon: false,\n      gameBoard: [\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n      ]\n    };\n  }\n\n  reset = () => {\n    const { gameBoard } = this.state;\n    let newBoard = [];\n    for (let i = 0; i < gameBoard.length; i++) {\n      newBoard[i] = new Array(gameBoard[i].length).fill(null);\n    }\n    this.setState({ gameBoard: newBoard, currentPlayer: 1, isWon: false });\n  };\n\n  togglePlayer = () => {\n    const { currentPlayer } = this.state;\n    if (currentPlayer === 1) {\n      this.setState({ currentPlayer: 0 });\n    } else {\n      this.setState({ currentPlayer: 1 });\n    }\n  };\n\n  checkForWin = (row, column) => {\n    const { gameBoard, currentPlayer } = this.state;\n    if (checkIfGameIsWon(row, column, gameBoard, currentPlayer) === true) {\n      this.setState({ isWon: true });\n      return true;\n    }\n    return false;\n  };\n\n  handleClick = (col) => {\n    const { currentPlayer } = this.state;\n    if (currentPlayer === 1) {\n      this.dropChecker(col);\n    }\n  };\n\n  dropChecker = (selectedColumn) => {\n    const { gameBoard, isWon, currentPlayer } = this.state;\n    const columnIsFull = gameBoard[0][selectedColumn] !== null ? true : false;\n    let gameBoardCopy = gameBoard;\n    let row = gameBoardCopy.length - 1;\n    let nextAvailableSpace;\n\n    if (isWon === true) {\n      return;\n    }\n    if (columnIsFull) {\n      return;\n    } else {\n      while (row >= 0) {\n        if (gameBoardCopy[row][selectedColumn] === null) {\n          nextAvailableSpace = row;\n          gameBoardCopy[nextAvailableSpace][selectedColumn] = currentPlayer;\n          break;\n        }\n        row--;\n      }\n      if (this.checkForWin(nextAvailableSpace, selectedColumn) === false) {\n        this.togglePlayer();\n      }\n      this.setState({ gameBoard: gameBoardCopy });\n    }\n  };\n\n  randomizer = () => {\n    const { gameBoard } = this.state;\n    const column = Math.floor(Math.random() * gameBoard.length);\n    this.dropChecker(column);\n  };\n\n  getCurrentPlayer = () => {\n    const { currentPlayer } = this.state;\n    if (currentPlayer === 1) {\n      return \"Human\";\n    } else {\n      return \"AI\";\n    }\n  };\n\n  componentDidUpdate(prevState, prevProps) {\n    const { currentPlayer } = this.state;\n    if (currentPlayer === 0) {\n      setTimeout(() => this.randomizer(), 2000);\n    }\n  }\n\n  render() {\n    const { gameBoard, isWon } = this.state;\n    const currPlayer = this.getCurrentPlayer();\n    return (\n      <div className=\"container\">\n        <Header currPlayer={currPlayer} isWon={isWon} reset={this.reset} />\n        <Table gameBoard={gameBoard} handleClick={this.handleClick} />\n      </div>\n    );\n  }\n}\n","import './App.css';\nimport Game from './Game';\nfunction App() {\n  return <Game />;\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}